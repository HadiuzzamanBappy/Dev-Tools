// utility.js

export function initializeUtilityBuilder() {
    const page = document.getElementById('css-utility-builder');
    if (!page) return;

    // --- DOM Elements ---
    const elements = {
        // Preview
        previewElement: page.querySelector('#utility-preview-element'),
        previewClassInput: page.querySelector('#utility-preview-class-input'),
        // Controls
        controlsContainer: page.querySelector('#utility-controls'),
        // Outputs
        cssOutput: page.querySelector('#output-code-css'),
        scssOutput: page.querySelector('#output-code-scss'),
        jsonOutput: page.querySelector('#output-code-json'),
        downloadBtn: page.querySelector('#download-utility-files-btn'),
        copyBtn: page.querySelector('#copy-utility-code-btn'),
    };

    const previewStyleTag = document.createElement('style');
    previewStyleTag.id = 'utility-builder-preview-styles';
    document.head.appendChild(previewStyleTag);


    // --- State Management ---
    const state = {
        modules: {
            spacing: true,
            sizing: true,
            typography: true,
            borders: true,
            flexbox: true
        },
        settings: {
            baseUnit: 4,
            spacingSteps: 12,
            fontSizeBase: 16,
            fontSizeRatio: 1.25,
            borderRadiusBase: 4
        },
    };

    // --- Core Generation Logic ---
    const generate = () => {
        const { settings, modules } = state;
        const tokens = { spacing: {}, fontSizes: {}, borderRadius: {} };
        let css = '/* Generated by DevTools */\n\n';
        let scss = '// Generated by DevTools\n\n';

        // 1. Spacing & Sizing
        if (modules.spacing || modules.sizing) {
            for (let i = 0; i <= settings.spacingSteps; i++) {
                // Use a key that works for both spacing and sizing steps
                const key = i;
                const valueRem = (settings.baseUnit * key) / 16;
                // Avoid 0rem for step 0, use 0 instead.
                tokens.spacing[key] = valueRem === 0 ? '0' : `${valueRem}rem`;
            }
            if (modules.spacing) {
                const props = { p: 'padding', m: 'margin' };
                const sides = { t: 'top', r: 'right', b: 'bottom', l: 'left', x: ['left', 'right'], y: ['top', 'bottom'] };
                for (const pKey in props) {
                    for (const i in tokens.spacing) {
                        css += `.${pKey}-${i} { ${props[pKey]}: ${tokens.spacing[i]}; }\n`;
                    }
                    for (const sKey in sides) {
                        for (const i in tokens.spacing) {
                            if (Array.isArray(sides[sKey])) {
                                sides[sKey].forEach(side => css += `.${pKey}${sKey}-${i} { ${props[pKey]}-${side}: ${tokens.spacing[i]}; }\n`);
                            } else {
                                css += `.${pKey}${sKey}-${i} { ${props[pKey]}-${sides[sKey]}: ${tokens.spacing[i]}; }\n`;
                            }
                        }
                    }
                }
            }
            if (modules.sizing) {
                css += `\n.w-auto { width: auto; }\n.w-full { width: 100%; }\n.h-auto { height: auto; }\n.h-full { height: 100%; }\n`;
            }
        }

        // 2. Typography
        if (modules.typography) {
            css += `\n`;
            // Clear previous font sizes to regenerate them based on new settings
            tokens.fontSizes = {}; 
            for (let i = -2; i <= 5; i++) {
                // Correctly name keys for negative numbers, e.g., fs--2, fs--1
                const key = `fs-${i}`;
                const valueRem = (settings.fontSizeBase * Math.pow(settings.fontSizeRatio, i)) / 16;
                tokens.fontSizes[key] = `${valueRem.toFixed(3)}rem`;
            }
            for(const key in tokens.fontSizes) css += `.${key} { font-size: ${tokens.fontSizes[key]}; }\n`;
            
            const weights = { thin: 100, light: 300, normal: 400, medium: 500, bold: 700, black: 900 };
            for(const key in weights) css += `.font-${key} { font-weight: ${weights[key]}; }\n`;
        }
        
        // 3. Borders
        if (modules.borders) {
            css += `\n`;
            // Clear previous border radius to regenerate
            tokens.borderRadius = {};
            for (let i = 0; i <= 4; i++) {
                const key = `rounded-${i}`;
                const value = settings.borderRadiusBase * i;
                tokens.borderRadius[key] = value === 0 ? '0' : `${value}px`;
            }
            for(const key in tokens.borderRadius) css += `.${key} { border-radius: ${tokens.borderRadius[key]}; }\n`;
            css += `.rounded-full { border-radius: 9999px; }\n`;
        }

        // 4. Flexbox
        if (modules.flexbox) {
            css += `\n.flex { display: flex; }\n.items-start { align-items: flex-start; }\n.items-center { align-items: center; }\n.items-end { align-items: end; }\n.justify-start { justify-content: flex-start; }\n.justify-center { justify-content: center; }\n.justify-end { justify-content: flex-end; }\n.justify-between { justify-content: space-between; }\n`;
        }
        
        // Generate SCSS variables from tokens
        scss += `// Spacing\n$sp-base: ${settings.baseUnit}px;\n`;
        for(const key in tokens.spacing) scss += `$sp-${key}: ${tokens.spacing[key]};\n`;
        scss += `\n// Font Sizes\n`;
        for(const key in tokens.fontSizes) scss += `$${key.replace('-', '_')}: ${tokens.fontSizes[key]};\n`;
        scss += `\n// Border Radius\n`;
        for(const key in tokens.borderRadius) scss += `$${key.replace('-', '_')}: ${tokens.borderRadius[key]};\n`;

        elements.cssOutput.textContent = css;
        elements.scssOutput.textContent = scss;
        elements.jsonOutput.textContent = JSON.stringify({ settings, tokens }, null, 2);
        
        previewStyleTag.textContent = css;

        Prism.highlightAllUnder(page);
    };

    // --- EVENT LISTENERS ---
    const setupListeners = () => {
        elements.controlsContainer.addEventListener('input', (e) => {
            const target = e.target;

            if (target.matches('.module-toggle')) {
                const module = target.dataset.module;
                if(module) {
                    state.modules[module] = target.checked;
                }
            } else if (target.matches('.setting-input')) {
                const setting = target.dataset.setting;
                if(setting) {
                    state.settings[setting] = Number(target.value) || 0;
                }
            }
            // Regenerate everything on any input change
            generate();
        });

        elements.previewClassInput.addEventListener('input', (e) => {
            elements.previewElement.className = `utility-preview-element ${e.target.value}`;
        });

        elements.downloadBtn.addEventListener('click', () => {
            if (typeof JSZip === 'undefined') {
                alert("Error: JSZip library not found. Cannot create .zip file.");
                return;
            }
            const zip = new JSZip();
            zip.file("tokens.json", elements.jsonOutput.textContent);
            zip.file("utilities.css", elements.cssOutput.textContent);
            zip.file("utilities.scss", elements.scssOutput.textContent);
            zip.generateAsync({ type: "blob" }).then(content => {
                const link = document.createElement('a');
                link.href = URL.createObjectURL(content);
                link.download = "css-utilities.zip";
                link.click();
                URL.revokeObjectURL(link.href);
            });
        });

        elements.copyBtn.addEventListener('click', () => {
            const activeTabPane = page.querySelector('.tab-pane.show.active');
            if (activeTabPane) {
                const codeToCopy = activeTabPane.querySelector('code').textContent;
                navigator.clipboard.writeText(codeToCopy).then(() => {
                    const originalText = elements.copyBtn.innerHTML;
                    elements.copyBtn.innerHTML = '<i class="fa-solid fa-check me-2"></i>Copied!';
                    setTimeout(() => { elements.copyBtn.innerHTML = originalText; }, 2000);
                });
            }
        });
    };
    
    // --- INITIALIZATION ---
    setupListeners();
    generate();
}